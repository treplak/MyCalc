import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        System.out.println("Введите арифметическое выражение:");
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String result;
        try {
            result = calc(input);
        } catch (Exception e) {
            System.out.println("Ошибка: " + e.getMessage());
            return;
        }
        System.out.println("Результат: " + result);
    }

    public static String calc(String input) {
        String[] tokens = input.split(" ");
        if (tokens.length != 3) {
            throw new IllegalArgumentException("Неправильный формат выражения!");
        }

        int num1;
        int num2;
        try {
            if (isRomanNumeral(tokens[0]) && isRomanNumeral(tokens[2])) {
                num1 = romanToArabic(tokens[0]);
                num2 = romanToArabic(tokens[2]);
            } else if (isArabicNumeral(tokens[0]) && isArabicNumeral(tokens[2])) {
                num1 = Integer.parseInt(tokens[0]);
                num2 = Integer.parseInt(tokens[2]);
            } else {
                throw new IllegalArgumentException("Неправильный формат чисел!");
            }
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Неправильный формат чисел!");
        }

        if (num1 < 1 || num1 > 10 || num2 < 1 || num2 > 10) {
            throw new IllegalArgumentException("Числа должны быть от 1 до 10 включительно!");
        }

        String operator = tokens[1];
        int result;
        switch (operator) {
            case "+":
                result = num1 + num2;
                break;
            case "-":
                result = num1 - num2;
                break;
            case "*":
                result = num1 * num2;
                break;
            case "/":
                if (num2 == 0) {
                    throw new ArithmeticException("Деление на ноль!");
                }
                result = num1 / num2;
                break;
            default:
                throw new IllegalArgumentException("Неправильный оператор!");
        }

        if (isRomanNumeral(tokens[0]) && isRomanNumeral(tokens[2])) {
            return arabicToRoman(result);
        } else {
            return String.valueOf(result);
        }
    }

    private static boolean isArabicNumeral(String input) {
        try {
            int num = Integer.parseInt(input);
            return num >= 1 && num <= 10;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static boolean isRomanNumeral(String input) {
        return input.matches("^[IVX]+$");
    }

    private static int romanToArabic(String input) {
        Map<Character, Integer> romanToArabicMap = new HashMap<>();
        romanToArabicMap.put('I', 1);
        romanToArabicMap.put('V', 5);
        romanToArabicMap.put('X', 10);

        int result = 0;
        int prevValue = 0;
        for (int i = input.length() - 1; i >= 0; i--) {
            int value = romanToArabicMap.get(input.charAt(i));
            if (value < prevValue) {
                result -= value;
            } else {
                result += value;
            }
            prevValue = value;
        }
        return result;
    }

    private static String arabicToRoman(int input) {
        if (input < 1) {
            throw new IllegalArgumentException("Невозможно представить отрицательные числа римскими цифрами!");
        }

        String[] romanNumerals = {"I", "IV", "V", "IX", "X", "XL", "L", "XC", "C"};
        int[] arabicValues = {1, 4, 5, 9, 10, 40, 50, 90, 100};

        StringBuilder result = new StringBuilder();
        for (int i = romanNumerals.length - 1; i >= 0; i--) {
            while (input >= arabicValues[i]) {
                result.append(romanNumerals[i]);
                input -= arabicValues[i];
            }
        }
        return result.toString();
    }
}